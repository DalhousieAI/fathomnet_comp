# Code attained from https://www.kaggle.com/code/lauravchrobak/taxonomic-hierarchical-distance
# As part of FathomNet Competition

import pandas as pd
import pandas.api.types
import gc
import numpy as np
import pandas.api.types

def hierarchical_distance(solution_dict: dict, submission_dict: dict, solution_key: str, submission_key: str) -> int:
    """
    Calculates the taxonomic distance between two dictionaries, one representing the solution 
    and the other a submission for a given annotation ID. The score represents the distance 
    along the taxonomic tree, with 0 indicating a perfect match and 12 being the maximum 
    distance (as all submissions fall under the Animalia kingdom).
    
    Arguments
    ----------
    solution_dict : dict
    A dictionary with keys representing each taxonomic level and values corresponding 
    to the correct taxon for the solution.
    submission_dict : dict
    A dictionary with the same format as solution_dict, representing the submitted taxon.
    solution_key : str
    The concept name of the solution.
    submission_key : str
    The concept name of the submission.
    
    Returns
    -------
    score : int
    The taxonomic distance score between the submission and the solution. For a visual 
    representation of this distance, refer to the GitHub README.
    
    """
    score = 0
    # Exception:
    # Five labels in the dataset do not fall within the accepted taxonomic ranks:
    # kingdom, phylum, class, order, family, genus, and species.
    # The following lines adjust the score appropriately to account for these exceptions.
    exception_lst = ['Caridea','Acanthascinae','Actinopterygii', 'Zoantharia', 'Tunicata']
    if solution_key != submission_key:
        if submission_key in exception_lst:
            score +=1
        if solution_key in exception_lst:
            score +=1
            
    # Calculate score
    for key in submission_dict:
        if submission_dict[key] is None:
          if solution_dict[key] != submission_dict[key]:
            score += 1
          else:
            continue
        else:
          if solution_dict[key] != submission_dict[key]:
            if solution_dict[key] is not None:
              score += 2
            else:
              score += 1
          else:
            continue
    return int(score)

class ParticipantVisibleError(Exception):
    pass

def score(
      solution: pd.DataFrame, 
      submission: pd.DataFrame, 
      row_id_column_name: str, 
      concept_name: str='concept_name',
      return_scores: bool=False,
      ) -> float:
    """
    Metric for the FathomNet 2025 FGVC competition.
    
    Parameters
    ----------
    solution : DataFrame
        A Pandas DataFrame with two columns: 'annotation_id' and 'concept_name', 
        representing the ground truth annotations.
    row_id_column_name : str
        The name of the column identifying annotation IDs (e.g., 'annotation_id').
    concept_name : str
        The name of the column representing concept names (e.g., 'concept_name').
    submission : DataFrame
        A Pandas DataFrame with the same format and size as the solution DataFrame, 
        representing the submitted predictions.
    
    Returns
    -------
    float
        The mean score across all annotation IDs.
    """
    if row_id_column_name not in submission.columns:
        raise ParticipantVisibleError('Submission file missing expected column ' + row_id_column_name)
    if row_id_column_name not in solution.columns:
        raise ParticipantVisibleError('Solution file missing expected column ' + row_id_column_name)
    if concept_name not in submission.columns:
        raise ParticipantVisibleError('Submission file missing expected column ' + concept_name)
    if concept_name not in solution.columns:
        raise ParticipantVisibleError('Solution file missing expected column ' + concept_name)
    solution = solution.sort_values(by=[row_id_column_name])
    submission = submission.sort_values(by=[row_id_column_name])
    if not (solution[row_id_column_name].values == submission[row_id_column_name].values).all():
        raise ParticipantVisibleError('The solution and submission row IDs are not identical')
    del solution[row_id_column_name]
    del submission[row_id_column_name]
    gc.collect()
    
    missing_cols = solution.columns.difference(submission.columns)
    if len(missing_cols) > 0:
        raise ParticipantVisibleError('Submission file missing expected columns ' + ', '.join(missing_cols))
    
    # Create reference dictionary of taxonomic names
    taxonomic_concept_dict = {'Ophiuroidea': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Ophiuroidea',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Funiculina': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Funiculinidae',
    'Genus': 'Funiculina',
    'Species': None},
    'Umbellula': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Umbellulidae',
    'Genus': 'Umbellula',
    'Species': None},
    'Sebastolobus': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': 'Teleostei',
    'Order': 'Perciformes',
    'Family': 'Sebastidae',
    'Genus': 'Sebastolobus',
    'Species': None},
    'Isosicyonis': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Actiniaria',
    'Family': 'Actiniidae',
    'Genus': 'Isosicyonis',
    'Species': None},
    'Paralomis multispina': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Lithodidae',
    'Genus': 'Paralomis',
    'Species': 'Paralomis multispina'},
    'Munnopsidae': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Isopoda',
    'Family': 'Munnopsidae',
    'Genus': None,
    'Species': None},
    'Gastropoda': {'Kingdom': 'Animalia',
    'Phylum': 'Mollusca',
    'Class': 'Gastropoda',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Ceriantharia': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Ceriantharia',
    'Family': None,
    'Genus': None,
    'Species': None},
    'Psathyrometra fragilis': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Crinoidea',
    'Order': 'Comatulida',
    'Family': 'Zenometridae',
    'Genus': 'Psathyrometra',
    'Species': 'Psathyrometra fragilis'},
    'Porifera': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': None,
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Caridea': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': None,
    'Genus': None,
    'Species': None},
    'Liponema brevicorne': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Actiniaria',
    'Family': 'Liponematidae',
    'Genus': 'Liponema',
    'Species': 'Liponema brevicorne'},
    'Lithodidae': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Lithodidae',
    'Genus': None,
    'Species': None},
    'Farrea': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Hexactinellida',
    'Order': 'Sceptrulophora',
    'Family': 'Farreidae',
    'Genus': 'Farrea',
    'Species': None},
    'Psolus squamatus': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Dendrochirotida',
    'Family': 'Psolidae',
    'Genus': 'Psolus',
    'Species': 'Psolus squamatus'},
    'Heterochone calyx': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Hexactinellida',
    'Order': 'Sceptrulophora',
    'Family': 'Aphrocallistidae',
    'Genus': 'Heterochone',
    'Species': 'Heterochone calyx'},
    'Strongylocentrotus fragilis': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Echinoidea',
    'Order': 'Camarodonta',
    'Family': 'Strongylocentrotidae',
    'Genus': 'Strongylocentrotus',
    'Species': 'Strongylocentrotus fragilis'},
    'Heteropolypus ritteri': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Coralliidae',
    'Genus': 'Heteropolypus',
    'Species': 'Heteropolypus ritteri'},
    'Acanthascinae': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Hexactinellida',
    'Order': 'Lyssacinosida',
    'Family': 'Rossellidae',
    'Genus': None,
    'Species': None},
    'Staurocalyptus': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Hexactinellida',
    'Order': 'Lyssacinosida',
    'Family': 'Rossellidae',
    'Genus': 'Staurocalyptus',
    'Species': None},
    'Peniagone': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Elasipodida',
    'Family': 'Elpidiidae',
    'Genus': 'Peniagone',
    'Species': None},
    'Benthocodon pedunculata': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hydrozoa',
    'Order': 'Trachymedusae',
    'Family': 'Rhopalonematidae',
    'Genus': 'Benthocodon',
    'Species': 'Benthocodon pedunculata'},
    'Scotoplanes globosa': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Elasipodida',
    'Family': 'Elpidiidae',
    'Genus': 'Scotoplanes',
    'Species': 'Scotoplanes globosa'},
    'Actiniaria': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Actiniaria',
    'Family': None,
    'Genus': None,
    'Species': None},
    'Scleractinia': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Scleractinia',
    'Family': None,
    'Genus': None,
    'Species': None},
    'Paragorgia': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Coralliidae',
    'Genus': 'Paragorgia',
    'Species': None},
    'Asbestopluma monticola': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Demospongiae',
    'Order': 'Poecilosclerida',
    'Family': 'Cladorhizidae',
    'Genus': 'Asbestopluma',
    'Species': 'Asbestopluma monticola'},
    'Elpidia': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Elasipodida',
    'Family': 'Elpidiidae',
    'Genus': 'Elpidia',
    'Species': None},
    'Abyssocucumis abyssorum': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Dendrochirotida',
    'Family': 'Cucumariidae',
    'Genus': 'Abyssocucumis',
    'Species': 'Abyssocucumis abyssorum'},
    'Brisingida': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Asteroidea',
    'Order': 'Brisingida',
    'Family': None,
    'Genus': None,
    'Species': None},
    'Hexactinellida': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Hexactinellida',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Isididae': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Malacalcyonacea',
    'Family': 'Isididae',
    'Genus': None,
    'Species': None},
    'Asteroidea': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Asteroidea',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Paelopatides confundens': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Synallactida',
    'Family': 'Synallactidae',
    'Genus': 'Paelopatides',
    'Species': 'Paelopatides confundens'},
    'Microstomus pacificus': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': 'Teleostei',
    'Order': 'Pleuronectiformes',
    'Family': 'Pleuronectidae',
    'Genus': 'Microstomus',
    'Species': 'Microstomus pacificus'},
    'Holothuroidea': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Hormathiidae': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Actiniaria',
    'Family': 'Hormathiidae',
    'Genus': None,
    'Species': None},
    'Chionoecetes tanneri': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Oregoniidae',
    'Genus': 'Chionoecetes',
    'Species': 'Chionoecetes tanneri'},
    'Keratoisis': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Keratoisididae',
    'Genus': 'Keratoisis',
    'Species': None},
    'Hippasteria': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Asteroidea',
    'Order': 'Valvatida',
    'Family': 'Goniasteridae',
    'Genus': 'Hippasteria',
    'Species': None},
    'Paragorgia arborea': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Coralliidae',
    'Genus': 'Paragorgia',
    'Species': 'Paragorgia arborea'},
    'Octopus rubescens': {'Kingdom': 'Animalia',
    'Phylum': 'Mollusca',
    'Class': 'Cephalopoda',
    'Order': 'Octopoda',
    'Family': 'Octopodidae',
    'Genus': 'Octopus',
    'Species': 'Octopus rubescens'},
    'Isidella tentaculum': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Keratoisididae',
    'Genus': 'Isidella',
    'Species': 'Isidella tentaculum'},
    'Pannychia moseleyi': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Elasipodida',
    'Family': 'Laetmogonidae',
    'Genus': 'Pannychia',
    'Species': 'Pannychia moseleyi'},
    'Actinopterygii': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': None,
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Asbestopluma': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Demospongiae',
    'Order': 'Poecilosclerida',
    'Family': 'Cladorhizidae',
    'Genus': 'Asbestopluma',
    'Species': None},
    'Ophiacanthidae': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Ophiuroidea',
    'Order': 'Ophiacanthida',
    'Family': 'Ophiacanthidae',
    'Genus': None,
    'Species': None},
    'Corallimorphus pilatus': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Corallimorpharia',
    'Family': 'Corallimorphidae',
    'Genus': 'Corallimorphus',
    'Species': 'Corallimorphus pilatus'},
    'Heterocarpus': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Pandalidae',
    'Genus': 'Heterocarpus',
    'Species': None},
    'Munidopsis': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Munidopsidae',
    'Genus': 'Munidopsis',
    'Species': None},
    'Serpulidae': {'Kingdom': 'Animalia',
    'Phylum': 'Annelida',
    'Class': 'Polychaeta',
    'Order': 'Sabellida',
    'Family': 'Serpulidae',
    'Genus': None,
    'Species': None},
    'Actinernus': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Actiniaria',
    'Family': 'Actinernidae',
    'Genus': 'Actinernus',
    'Species': None},
    'Scotoplanes': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Elasipodida',
    'Family': 'Elpidiidae',
    'Genus': 'Scotoplanes',
    'Species': None},
    'Florometra serratissima': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Crinoidea',
    'Order': 'Comatulida',
    'Family': 'Antedonidae',
    'Genus': 'Florometra',
    'Species': 'Florometra serratissima'},
    'Sebastes': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': 'Teleostei',
    'Order': 'Perciformes',
    'Family': 'Sebastidae',
    'Genus': 'Sebastes',
    'Species': None},
    'Rathbunaster californicus': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Asteroidea',
    'Order': 'Forcipulatida',
    'Family': 'Asteriidae',
    'Genus': 'Rathbunaster',
    'Species': 'Rathbunaster californicus'},
    'Sebastes diploproa': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': 'Teleostei',
    'Order': 'Perciformes',
    'Family': 'Sebastidae',
    'Genus': 'Sebastes',
    'Species': 'Sebastes diploproa'},
    'Acanthoptilum': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Virgulariidae',
    'Genus': 'Acanthoptilum',
    'Species': None},
    'Metridium farcimen': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': 'Actiniaria',
    'Family': 'Metridiidae',
    'Genus': 'Metridium',
    'Species': 'Metridium farcimen'},
    'Terebellidae': {'Kingdom': 'Animalia',
    'Phylum': 'Annelida',
    'Class': 'Polychaeta',
    'Order': 'Terebellida',
    'Family': 'Terebellidae',
    'Genus': None,
    'Species': None},
    'Zoantharia': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hexacorallia',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Mediaster aequalis': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Asteroidea',
    'Order': 'Valvatida',
    'Family': 'Goniasteridae',
    'Genus': 'Mediaster',
    'Species': 'Mediaster aequalis'},
    'Pandalus amplus': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Pandalidae',
    'Genus': 'Pandalus',
    'Species': 'Pandalus amplus'},
    'Tunicata': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': None,
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Chorilia longipes': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Epialtidae',
    'Genus': 'Chorilia',
    'Species': 'Chorilia longipes'},
    'Crinoidea': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Crinoidea',
    'Order': None,
    'Family': None,
    'Genus': None,
    'Species': None},
    'Amphipoda': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Amphipoda',
    'Family': None,
    'Genus': None,
    'Species': None},
    'Vesicomyidae': {'Kingdom': 'Animalia',
    'Phylum': 'Mollusca',
    'Class': 'Bivalvia',
    'Order': 'Venerida',
    'Family': 'Vesicomyidae',
    'Genus': None,
    'Species': None},
    'Pyrosoma atlanticum': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': 'Thaliacea',
    'Order': 'Pyrosomatida',
    'Family': 'Pyrosomatidae',
    'Genus': 'Pyrosoma',
    'Species': 'Pyrosoma atlanticum'},
    'Pennatula phosphorea': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Pennatulidae',
    'Genus': 'Pennatula',
    'Species': 'Pennatula phosphorea'},
    'Pandalus platyceros': {'Kingdom': 'Animalia',
    'Phylum': 'Arthropoda',
    'Class': 'Malacostraca',
    'Order': 'Decapoda',
    'Family': 'Pandalidae',
    'Genus': 'Pandalus',
    'Species': 'Pandalus platyceros'},
    'Parastenella': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Scleralcyonacea',
    'Family': 'Primnoidae',
    'Genus': 'Parastenella',
    'Species': None},
    'Apostichopus leukothele': {'Kingdom': 'Animalia',
    'Phylum': 'Echinodermata',
    'Class': 'Holothuroidea',
    'Order': 'Synallactida',
    'Family': 'Stichopodidae',
    'Genus': 'Apostichopus',
    'Species': 'Apostichopus leukothele'},
    'Gersemia juliepackardae': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Octocorallia',
    'Order': 'Malacalcyonacea',
    'Family': 'Alcyoniidae',
    'Genus': 'Gersemia',
    'Species': 'Gersemia juliepackardae'},
    'Ptychogastria polaris': {'Kingdom': 'Animalia',
    'Phylum': 'Cnidaria',
    'Class': 'Hydrozoa',
    'Order': 'Trachymedusae',
    'Family': 'Ptychogastriidae',
    'Genus': 'Ptychogastria',
    'Species': 'Ptychogastria polaris'},
    'Delectopecten': {'Kingdom': 'Animalia',
    'Phylum': 'Mollusca',
    'Class': 'Bivalvia',
    'Order': 'Pectinida',
    'Family': 'Pectinidae',
    'Genus': 'Delectopecten',
    'Species': None},
    'Merluccius productus': {'Kingdom': 'Animalia',
    'Phylum': 'Chordata',
    'Class': 'Teleostei',
    'Order': 'Gadiformes',
    'Family': 'Merlucciidae',
    'Genus': 'Merluccius',
    'Species': 'Merluccius productus'},
    'Mycale': {'Kingdom': 'Animalia',
    'Phylum': 'Porifera',
    'Class': 'Demospongiae',
    'Order': 'Poecilosclerida',
    'Family': 'Mycalidae',
    'Genus': 'Mycale',
    'Species': None}}
    
    
    scores = []
    # If a submission concept is not one of the 79 accepted concepts the max
    # penalty of 12 is assigned.
    max_score = 12
    for index, row in solution.iterrows():
      if row['concept_name'] not in taxonomic_concept_dict:
        print(f"The concept_name {row['concept_name']} for annotation_id {index} was not in the dictionary of accepted concepts so it will get a max score of {max_score}.")
        scores.append(max_score)
        continue
      if row['concept_name'] == 'Pyrosoma detritus':
            continue
      # Create taxonomic dictionaries for the solution and submission DataFrames
      solution_key = row['concept_name']
      solution_dict = taxonomic_concept_dict[solution_key]
      submission_key = submission.iloc[index]['concept_name']
      submission_dict = taxonomic_concept_dict[submission_key]
      score = hierarchical_distance(solution_dict, submission_dict, solution_key, submission_key)
      print(f"The score for annotation_id {index} is {score}.")
      scores.append(score)
    final_score = float(np.mean(scores))
    print(f"The overall score for this submission is {final_score}.")
    if return_scores:
        return final_score, scores
    return final_score